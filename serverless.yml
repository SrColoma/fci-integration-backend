service: fci-integration-backend
frameworkVersion: '3'

plugins:
  - serverless-dynamodb-local
  - serverless-offline
provider:
  environment:
    USERS_TABLE: 'users-${self:provider.stage}'
    CAMARON_VALORES_TABLE: "CAMARON_VALORES_TABLE"
    CAMARON_CONFIGURACION_TABLE: "CAMARON_CONFIGURACION_TABLE"
    IS_OFFLINE: 'true'
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: us-west-1
  iam:
    Role:
      Statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - { "Fn::GetAtt": ['users-${self:provider.stage}', "Arn" ] }

custom:
  # USERS_TABLE: 'users-table-${self:provider.stage}'
  dynamodb:
    stages:
      - dev
    start:
      docker: true
      port: 8000
      inMemory: true
      migrate: true
      seed: true
      convertEmptyValues: true

functions:
  deleteTable:
    handler: src/deleteTable.deleteTable
    events:
      - httpApi:
          path: /deleteTable/{tableName}
          method: get
  hello:
    handler: src/hello.hello
    events:
      - httpApi:
          path: /
          method: get
  addUser:
    handler: src/addUser.addUser
    events:
      - httpApi:
          path: /addUser
          method: post
  getUser:
    handler: src/getUser.getUser
    events:
      - httpApi:
          path: /getUser/{userId}
          method: get
  getUsers:
    handler: src/getUsers.getUsers
    events:
      - httpApi:
          path: /getUsers
          method: get
  
  # Api de Camaron
  CamaronAddValores:
    handler: src/camaron/addValores.addValores
    events:
      - httpApi:
          path: /camaronAddValores
          method: post
  CamaronGetBoxConfig:
    handler: src/camaron/getBoxConfig.getBoxConfig
    events:
      - httpApi:
          path: /camaronGetBoxConfig
          method: get
  CamaronGetValores:
    handler: src/camaron/getValores.getValores
    events:
      - httpApi:
          path: /camaronGetValores
          method: post
  CamaronSetBoxConfig:
    handler: src/camaron/setBoxConfig.setBoxConfig
    events:
      - httpApi:
          path: /camaronSetBoxConfig
          method: post
  CamaronGetAllValores:
    handler: src/camaron/getAllValores.getAllValores
    events:
      - httpApi:
          path: /camaronGetAllValores
          method: get



resources:
  Resources:
    table:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: 'users-${self:provider.stage}'
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
    
    CamaronValoresTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: CAMARON_VALORES_TABLE
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: fecha
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: fecha
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        # GlobalSecondaryIndexes:
        #   - IndexName: 'fecha-hora-index'
        #     KeySchema:
        #       - AttributeName: fecha
        #         KeyType: HASH
        #       - AttributeName: hora
        #         KeyType: RANGE
        #     Projection:
        #       ProjectionType: ALL
        #     ProvisionedThroughput:
        #       ReadCapacityUnits: 1
        #       WriteCapacityUnits: 1
          
    CamaronConfiguracionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: CAMARON_CONFIGURACION_TABLE
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
